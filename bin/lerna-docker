#!/usr/bin/env bash

# Validate input arguments
if [[ $# -ne 3 && $# -ne 2 ]]; then
    echo "Incorrect input arguments"
    echo "Usage: lerna-docker my-docker-organization build|push [version-tag]"
    exit 1
fi

# Determine the Docker organization name
org=$1

if [[ $2 == "push" ]]; then
    # Make sure we are logged in
    echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
fi

# Set a version tag
LATEST=false
if [[ $# -eq 3 ]]; then
    VERSION=$3
    LATEST=true
else
    if [ ! -z "$TRAVIS_TAG" ]; then
        VERSION=${TRAVIS_TAG:1}
        LATEST=true
   elif [[ "$GITHUB_REF" =~ refs/tags/* ]]; then
        VERSION=${GITHUB_REF:10}
        LATEST=true
    else
        VERSION="dev"
    fi
fi
echo "Building images with tag $VERSION"

# Set up a temporary npm registry on http://localhost:4873 in which we publish all current lerna packages
mkdir -p /tmp/verdaccio/storage
tool_dir="$(dirname "${BASH_SOURCE[0]}")/.."
verdaccio --config $tool_dir/verdaccio-config.yaml &
sleep 1
REGISTRY_PID=$!
npm-cli-adduser --registry http://localhost:4873 --username lerna --password lerna --email lerna@example.org
npx lerna exec -- npm publish --silent --registry http://localhost:4873 > /dev/null

NPM_REGISTRY="http://host.docker.internal:4873/"

# Restart the temporary npm registry, but now add an uplink to npm
kill -9 $REGISTRY_PID
verdaccio --config $tool_dir/verdaccio-config-uplink.yaml &
sleep 1
REGISTRY_PID=$!
function finish {
    # Stop and clean npm registry
    kill -9 $REGISTRY_PID
    rm -r /tmp/verdaccio/storage
}
trap finish EXIT

# Build images for all packages with a Dockerfile, and optionally push them
for package in packages/* engines/*; do
    if [ -f $package/Dockerfile ]; then
        imagename="$org/"$(echo $package | sed "s/[^\/]*\///")

        echo "Building Docker image $imagename..."
        if ! docker build --network="host" --build-arg NPM_REGISTRY=$NPM_REGISTRY -t $imagename:$VERSION $package; then
            echo "Failed to build Docker image for $package"
            exit 1;
        fi
        if [ "$LATEST" = true ] ; then
            docker tag $imagename:$VERSION $imagename:latest
        fi

        if [[ $2 == "push" ]]; then
            echo "Pushing Docker image $imagename..."
            docker push $imagename:$VERSION
            if [ "$LATEST" = true ] ; then
                docker push $imagename:latest
            fi
        fi
    fi
done
